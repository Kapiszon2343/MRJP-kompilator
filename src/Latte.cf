-- programs ------------------------------------------------

Program.   Program ::= [TopDef] ;
FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty TopDef "" ;
Arg. 	   Arg ::= Type Ident;
separator  Arg "," ;
ClassDef.  TopDef ::= "class" Ident "{" [ClassElem] "}" ;
ClassExt.  TopDef ::= "class" Ident "extends" Ident "{" [ClassElem] "}" ;
separator  ClassElem "" ;
Attribute. ClassElem ::= Type Ident ";" ;
Method.    ClassElem ::= Type Ident "(" [Arg] ")" Block ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;
separator  Stmt "" ;
Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Ass.       Stmt ::= Var "=" Expr ";" ;
Incr.      Stmt ::= Var "++" ";" ;
Decr.      Stmt ::= Var "--" ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Type Ident "=" Expr ";" Expr ";" Stmt ")" Stmt ;
ForEach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr ";" ;

-- Variables -----------------------------------------------

IdentVar.  Var ::= Ident ;
ArrayVar.  Var ::= Var "[" Expr "]" ;
AttrVar.   Var ::= Var "." Ident ;

-- Types ---------------------------------------------------

Class.     Type ::= Ident ;
Array.     Type ::= Type "[]" ;
Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "boolean" ;
Void.      Type ::= "void" ;
internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- New -----------------------------------------------------

NewBase.   New ::= "new" Type ;
NewArray.  New ::= New "[" Expr "]" ;

-- Expressions ---------------------------------------------

ENew.      Expr6 ::= New ;
EVar.      Expr6 ::= Var ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
ELitArr.   Expr6 ::= "[" [Expr] "]" ;
EApp.      Expr6 ::= Var "(" [Expr] ")" ;
EString.   Expr6 ::= String ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
separator  Expr "," ;
coercions  Expr 6 ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
